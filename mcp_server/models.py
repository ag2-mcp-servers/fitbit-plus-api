# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:21:43+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class Maximum(BaseModel):
    unit: Optional[str] = None
    value: Optional[float] = None


class Minimum(BaseModel):
    unit: Optional[str] = None
    value: Optional[float] = None


class Validations(BaseModel):
    maximum: Optional[Maximum] = None
    minimum: Optional[Minimum] = None


class ActionMetric(BaseModel):
    goal: Optional[Dict[str, Any]] = None
    metric_type: Optional[str] = None
    unit: Optional[str] = None
    validations: Optional[Validations] = None


class Streak(BaseModel):
    count: Optional[int] = None
    updated_at: Optional[str] = None


class Adherence(BaseModel):
    complete: Optional[int] = None
    due: Optional[int] = None
    streak: Optional[Streak] = None


class Day(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6


class Weeks(BaseModel):
    days: Optional[List[Day]] = None


class FrequencyGoal(BaseModel):
    weeks: Optional[Weeks] = None


class Type(Enum):
    other_lifestyle = 'other_lifestyle'


class Data(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Plan(BaseModel):
    data: Optional[Data] = None
    links: Optional[Dict[str, Any]] = None


class Relationships(BaseModel):
    plan: Optional[Plan] = None


class ActionWindow(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    title: Optional[str] = None
    type: str


class Address(BaseModel):
    city: Optional[str] = Field(None, examples=['Cambridge'])
    country: Optional[str] = None
    district: Optional[str] = None
    lines: Optional[List[str]] = Field(None, examples=[['1234 Any St.']])
    postal_code: Optional[str] = Field(None, examples=['02138'])
    state: Optional[str] = Field(None, examples=['MA'])
    text: Optional[str] = None
    type: Optional[str] = None
    use: Optional[str] = None


class ArchiveHistory(BaseModel):
    archived: Optional[bool] = Field(None, examples=[True])
    modified_at: Optional[str] = Field(None, examples=['2016-06-03T13:15:22.000Z'])
    notes: Optional[str] = Field(
        None, examples=['Patient called requesting opt out of coaching']
    )
    reason: Optional[str] = Field(None, examples=['Opted out of coaching'])


class Attributes1(BaseModel):
    field_thread: Optional[str] = Field(None, alias='_thread')
    effective_from: str
    effective_to: Optional[str] = None
    title: str
    type: str


class Actions(BaseModel):
    data: Optional[Data] = None
    links: Optional[Dict[str, Any]] = None


class Plan1(BaseModel):
    data: Optional[Data] = None
    links: Optional[Dict[str, Any]] = None


class Relationships1(BaseModel):
    actions: Optional[Actions] = None
    plan: Optional[Plan1] = None


class BundleResource(BaseModel):
    attributes: Optional[Attributes1] = None
    id: str
    relationships: Optional[Relationships1] = None
    type: str


class ResponseStatus(Enum):
    needsAction = 'needsAction'
    declined = 'declined'
    tentative = 'tentative'
    accepted = 'accepted'


class Attendee(BaseModel):
    response_status: Optional[ResponseStatus] = Field(
        None, description='Status of responses from attendees'
    )
    user: Optional[str] = None


class Type1(Enum):
    plan_check_in = 'plan-check-in'
    reminder = 'reminder'
    telephone_call = 'telephone-call'
    office_visit = 'office-visit'
    video_call = 'video-call'


class Attributes2(BaseModel):
    all_day: Optional[bool] = Field(
        None,
        description='True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.',
    )
    attendees: Optional[List[Attendee]] = Field(
        None, description='List of attendees for the calendar event'
    )
    completed_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.',
        examples=['2017-11-03T06:17:34.652Z'],
    )
    completed_by: Optional[Dict[str, Any]] = Field(
        None,
        description='The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.',
    )
    description: Optional[str] = None
    end_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event ends. Not valid for `plan-check-in` event type.',
        examples=['2017-11-03T08:00:00.000Z'],
    )
    location: Optional[str] = None
    start_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event starts',
        examples=['2017-11-03T04:00:00.000Z'],
    )
    time_zone: Optional[str] = Field(
        None,
        description='The time zone in which the dates for the calendar event are specified',
        examples=['America/New_York'],
    )
    title: Optional[str] = Field(
        None, description='The title of the calendar event. Must not be empty or null'
    )
    type: Optional[Type1] = Field(
        None, description='The type of calendar event. Immutable after event creation.'
    )


class Links(BaseModel):
    self: Optional[constr(pattern=r'/calendar_event/[0-9a-z]+')] = Field(
        None, examples=['/calendar_event/5a0c8e2aa9d454cc1509a142']
    )


class Links1(BaseModel):
    related: Optional[constr(pattern=r'/pub/calendar_event/[0-9a-z]+')] = Field(
        None, examples=['/pub/calendar_event/5a0c8e2aa9d454cc1509a142/owner']
    )


class Owner(BaseModel):
    data: Data
    links: Optional[Links1] = None


class Relationships2(BaseModel):
    owner: Optional[Owner] = Field(
        None,
        description='The owner is the patient for whom the calendar event is created specificially for',
    )


class Type2(Enum):
    calendar_event = 'calendar_event'


class CalendarEventResource(BaseModel):
    attributes: Optional[Attributes2] = None
    id: Optional[str] = None
    links: Optional[Links] = None
    relationships: Optional[Relationships2] = None
    type: Optional[Type2] = None


class ResponseStatus1(Enum):
    accepted = 'accepted'
    declined = 'declined'
    tentative = 'tentative'


class Attributes3(BaseModel):
    attendee: Optional[Dict[str, Any]] = Field(
        None, description='The attendee in the attendees list of the calendar event.'
    )
    response_status: Optional[ResponseStatus1] = Field(
        None, description='The response status for the attendee.'
    )


class Links2(BaseModel):
    self: Optional[constr(pattern=r'/calendar_event_response/[0-9a-z]+')] = Field(
        None, examples=['/calendar_event_response/5ad0f966ceb0909e4bfa84dd']
    )


class Links3(BaseModel):
    related: Optional[constr(pattern=r'/pub/calendar_event_response/[0-9a-z]+')] = (
        Field(
            None,
            examples=[
                '/pub/calendar_event_response/5ad0f966ceb0909e4bfa84dd/calendar_event'
            ],
        )
    )


class CalendarEvent(BaseModel):
    data: Data
    links: Optional[Links3] = None


class Links4(BaseModel):
    related: Optional[constr(pattern=r'/pub/calendar_event_response/[0-9a-z]+')] = (
        Field(
            None,
            examples=['/pub/calendar_event_response/5ad0f966ceb0909e4bfa84dd/user'],
        )
    )


class User(BaseModel):
    data: Data
    links: Optional[Links4] = None


class Relationships3(BaseModel):
    calendar_event: Optional[CalendarEvent] = Field(
        None,
        description='The calendar_event is the calendar event for which the calendar event response is created specificially for',
    )
    user: Optional[User] = Field(
        None,
        description='The user is the coach or patient for whom the calendar event response is created specificially for',
    )


class Type3(Enum):
    calendar_event_response = 'calendar_event_response'


class CalendarEventResponseResource(BaseModel):
    attributes: Optional[Attributes3] = None
    id: Optional[str] = None
    links: Optional[Links2] = None
    relationships: Optional[Relationships3] = None
    type: Optional[Type3] = None


class Attributes4(BaseModel):
    first_name: Optional[str] = Field(None, examples=['Clarisa'])
    last_name: Optional[str] = Field(None, examples=['Rivera'])


class Links5(BaseModel):
    self: constr(pattern=r'/coach/[0-9a-z]+') = Field(
        ..., examples=['/coach/57b36e3c04ad8c2224f2af38']
    )


class Type4(Enum):
    coach = 'coach'


class CoachResource(BaseModel):
    attributes: Attributes4
    id: str = Field(..., examples=['57b36e3c04ad8c2224f2af38'])
    links: Optional[Links5] = None
    type: Type4 = Field(..., examples=['coach'])


class CollectionResponseLinks(BaseModel):
    last: Optional[str] = None
    next: Optional[str] = None
    prev: Optional[str] = None
    self: Optional[str] = None


class CreateBundleRequest(BaseModel):
    data: BundleResource


class CreateOrUpdateMetaResponse(BaseModel):
    ignored: Optional[List[str]] = None
    req_id: Optional[str] = None


class Meta(BaseModel):
    ignore_duplicates: Optional[bool] = Field(
        None,
        description='If `true`, the patient health metric will be ignored if there is an existing patient health metric for\nthe same patient, with the same `type` and same `occurred_at`.\n',
    )


class Meta1(BaseModel):
    ignore_duplicates: Optional[bool] = Field(
        False,
        description='If `true`, patients with any conflicting identifiers (same `system` and `value`) will be ignored.\nUseful for gracefully skipping duplicates after errors occur during bulk create.\n',
    )


class GrantType(Enum):
    refresh_token = 'refresh_token'
    client_credentials = 'client_credentials'


class Attributes5(BaseModel):
    client_id: str = Field(
        ...,
        description='Contact Fitbit Plus API Support to get a client id and secret.',
        examples=['19391dc5-8af8-4152-93e8-74ff9361607e'],
    )
    client_secret: Optional[str] = Field(
        None,
        description='Contact Fitbit Plus API Support to get a client id and secret. Secret is required if grant_type is "client_credentials"',
        examples=['63eca384-7a65-42e2-872b-afd3e8659d0a'],
    )
    grant_type: GrantType = Field(..., examples=['client_credentials'])
    refresh_token: Optional[str] = Field(
        None,
        description='Required if grant_type is "refresh_token"',
        examples=['b7dcc4a4-593b-4410-a0c5-97ae48939396'],
    )


class Type5(Enum):
    token = 'token'


class Data8(BaseModel):
    attributes: Attributes5
    type: Optional[Type5] = Field(None, examples=['token'])


class CreateTokenRequest(BaseModel):
    data: Data8


class StatusTimes(BaseModel):
    bounce: Optional[str] = Field(None, description='Time email was bounced.')
    click: Optional[str] = Field(None, description='Time email was clicked.')
    deferred: Optional[str] = Field(None, description='Time email was deferred.')
    delivered: Optional[str] = Field(None, description='Time email was delivered.')
    dropped: Optional[str] = Field(None, description='Time email was dropped.')
    open: Optional[str] = Field(None, description='Time email was opened.')
    processed: Optional[str] = Field(None, description='Time email was processed.')
    spamreport: Optional[str] = Field(
        None, description='Time email was reported as spam.'
    )
    unsubscribe: Optional[str] = Field(
        None, description='Time email was unsubscribed from.'
    )


class Attributes6(BaseModel):
    email_address: Optional[str] = Field(None, description='Address email was sent to.')
    email_type: Optional[str] = Field(None, description='Type of email.')
    send_time: Optional[str] = Field(None, description='Time email was sent.')
    status_times: Optional[StatusTimes] = Field(
        None,
        description='Status of email. Multiple statuses may be defined. The current status is the one with the most recent date.',
    )
    twine_email_id: Optional[str] = Field(
        None, description='Unique identifier for this email.'
    )


class Data9(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Receiver(BaseModel):
    data: Optional[Data9] = None


class Sender(BaseModel):
    data: Optional[Data9] = None


class Relationships6(BaseModel):
    receiver: Optional[Receiver] = None
    sender: Optional[Sender] = None


class EmailHistoryResource(BaseModel):
    attributes: Optional[Attributes6] = None
    id: Optional[str] = None
    relationships: Optional[Relationships6] = None
    type: str


class Code(Enum):
    Forbidden = 'Forbidden'
    InvalidParameter = 'InvalidParameter'
    InvalidBodyParameter = 'InvalidBodyParameter'
    ResourceNotFound = 'ResourceNotFound'
    Unauthorized = 'Unauthorized'
    InvalidCredentials = 'InvalidCredentials'
    InvalidGrantType = 'InvalidGrantType'


class Source(BaseModel):
    parameter: Optional[str] = None
    pointer: Optional[str] = None


class Error(BaseModel):
    code: Optional[Code] = None
    detail: Optional[str] = None
    source: Optional[Source] = None
    status: Optional[str] = None
    title: Optional[str] = None


class FetchMetaResponse(BaseModel):
    count: Optional[int] = None
    req_id: Optional[str] = None


class Attributes7(BaseModel):
    bio: Optional[str] = Field(
        None,
        description='A description of the group',
        examples=['Team Health is all about the patient experience.'],
    )
    name: str = Field(
        ..., description='The name of the group', examples=['Team Health']
    )


class Links6(BaseModel):
    self: constr(pattern=r'/group/[0-9a-z]+') = Field(
        ..., examples=['/group/57b36e3c04ad8c2224f2af38']
    )


class Type6(Enum):
    group = 'group'


class GroupResource(BaseModel):
    attributes: Attributes7
    id: str = Field(..., examples=['57b36e3c04ad8c2224f2af38'])
    links: Optional[Links6] = None
    type: Type6 = Field(..., examples=['group'])


class HistoryItem(BaseModel):
    field_created_by: Optional[str] = Field(
        None,
        alias='_created_by',
        description='The id of the patient or coach who answered the health profile question',
    )
    answered_at: Optional[str] = Field(
        None, description='The date when the health profile question is answered'
    )
    value: Optional[str] = Field(
        None,
        description='The value of the answer entered for the health profile question',
    )


class Latest(BaseModel):
    field_created_by: Optional[str] = Field(
        None,
        alias='_created_by',
        description='The id of the patient or coach who answered the health profile question',
    )
    answered_at: Optional[str] = Field(
        None, description='The date when the health profile question is answered'
    )
    value: Optional[str] = Field(
        None,
        description='The value of the answer entered for the health profile question',
    )


class Attributes8(BaseModel):
    history: Optional[List[HistoryItem]] = Field(
        None,
        description='List of details of previous answers for a health profile question',
    )
    latest: Optional[Latest] = Field(
        None,
        description='The details of the latest answer for a health profile question',
    )
    question_id: Optional[str] = None


class Links7(BaseModel):
    self: constr(pattern=r'/health_profile_answer/[0-9a-z]+') = Field(
        ..., examples=['/health_profile_answer/59d441ac21741161bbe266b5']
    )


class Links8(BaseModel):
    related: Optional[constr(pattern=r'/pub/health_profile_answer/[0-9a-z]+')] = Field(
        None, examples=['/pub/health_profile_answer/59d441ac21741161bbe266b5/patient']
    )


class Patient(BaseModel):
    data: Optional[Data9] = None
    links: Optional[Links8] = None


class Relationships7(BaseModel):
    patient: Optional[Patient] = None


class HealthProfileAnswerResource(BaseModel):
    attributes: Optional[Attributes8] = None
    id: str
    links: Optional[Links7] = None
    relationships: Optional[Relationships7] = None
    type: str


class Links9(BaseModel):
    self: constr(pattern=r'/pub/health_profile_question/[0-9a-z]+') = Field(
        ..., examples=['/pub/health_profile_question/59d435931d078505ba744e88']
    )


class Links10(BaseModel):
    related: Optional[
        constr(pattern=r'/pub/health_profile_question/[0-9a-z]+/answer')
    ] = Field(
        None, examples=['/pub/health_profile_question/59d435931d078505ba744e88/answer']
    )


class Answer(BaseModel):
    data: Optional[Data9] = None
    links: Optional[Links10] = None


class Links11(BaseModel):
    related: Optional[
        constr(pattern=r'/pub/health_profile_question/[0-9a-z]+/profile')
    ] = Field(
        None, examples=['/pub/health_profile_question/59d435931d078505ba744e88/profile']
    )


class Profile(BaseModel):
    links: Optional[Links11] = None


class Links13(BaseModel):
    related: Optional[
        constr(pattern=r'/pub/health_profile_question/[0-9a-z]+/question_definition')
    ] = Field(
        None,
        examples=[
            '/pub/health_profile_question/59d435931d078505ba744e88/question_definition'
        ],
    )


class Links12(BaseModel):
    links: Optional[Links13] = None


class QuestionDefinition(BaseModel):
    data: Optional[Data9] = None
    links: Optional[Links12] = None


class Relationships8(BaseModel):
    answer: Optional[Answer] = None
    profile: Optional[Profile] = None
    question_definition: Optional[QuestionDefinition] = None


class HealthProfileQuestionResource(BaseModel):
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='A health profile question does not have any attribute since it only relates an answer to the corresponding question definition.\n',
    )
    id: str
    links: Optional[Links9] = None
    relationships: Optional[Relationships8] = None
    type: str


class Category(Enum):
    lifestyle_behaviors = 'lifestyle_behaviors'
    mental_wellbeing = 'mental_wellbeing'
    preventative_care = 'preventative_care'
    overall = 'overall'


class Stat(BaseModel):
    answered: Optional[float] = None
    category: Optional[Category] = None
    total: Optional[float] = None


class Attributes9(BaseModel):
    stats: Optional[List[Stat]] = Field(
        None,
        description='List of category, answered and total counts for questions in the health profile',
    )


class Links14(BaseModel):
    self: constr(pattern=r'/health_profile/[0-9a-z]+') = Field(
        ..., examples=['/health_profile/59d441ac21741161bbe266b5']
    )


class Links15(BaseModel):
    related: Optional[constr(pattern=r'/pub/health_profile/[0-9a-z]+')] = Field(
        None, examples=['/pub/health_profile/59d441ac21741161bbe266b5/patient']
    )


class Patient1(BaseModel):
    data: Optional[Data9] = None
    links: Optional[Links15] = None


class Datum(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Links16(BaseModel):
    related: Optional[constr(pattern=r'/pub/health_profile/[0-9a-z]+')] = Field(
        None, examples=['/pub/health_profile/59d441ac21741161bbe266b5/questions']
    )


class Questions(BaseModel):
    data: Optional[List[Datum]] = None
    links: Optional[Links16] = None


class Relationships9(BaseModel):
    patient: Optional[Patient1] = None
    questions: Optional[Questions] = None


class HealthProfileResource(BaseModel):
    attributes: Optional[Attributes9] = None
    id: Optional[str] = None
    links: Optional[Links14] = None
    relationships: Optional[Relationships9] = None
    type: str


class Category1(Enum):
    lifestyle_behaviors = 'lifestyle_behaviors'
    mental_wellbeing = 'mental_wellbeing'
    preventative_care = 'preventative_care'


class Datum1(BaseModel):
    icon: Optional[str] = None
    label: Optional[str] = None
    value: Optional[str] = None


class Format(BaseModel):
    data: Optional[List[Datum1]] = None
    type: Optional[str] = None


class Requirement(BaseModel):
    property: Optional[str] = None
    shouldBeEqual: Optional[bool] = Field(
        None,
        description='Specifies if the value in property should be equal to the one in value',
    )
    shouldBeGreaterThan: Optional[float] = Field(
        None,
        description='Specifies if the value in property should be greater than the one in value',
    )
    shouldBeLessThan: Optional[float] = Field(
        None,
        description='Specifies if the value in property should be less than the one in value',
    )
    value: Optional[str] = Field(
        None,
        description='The value to be compared with the one in property, based on shouldBeEqual, shouldBeGreaterThan, or shouldBeLessThan',
    )


class Attributes10(BaseModel):
    category: Optional[Category1] = Field(
        None, description='The category for the health profile definition'
    )
    format: Optional[Format] = Field(
        None, description='The list of formats for the health profile definition'
    )
    requirements: Optional[List[Requirement]] = Field(
        None,
        description='The lsit of age and gender requirements for the question to be included',
    )
    text: Optional[str] = Field(
        None, description='The question text which corresponds to the answer choices'
    )


class Links17(BaseModel):
    self: constr(pattern=r'/health_question_definition/[0-9]+') = Field(
        ..., examples=['/health_question_definition/4']
    )


class HealthQuestionDefinitionResource(BaseModel):
    attributes: Optional[Attributes10] = None
    id: str
    links: Optional[Links17] = None
    relationships: Optional[Dict[str, Any]] = None
    type: str


class Identifier(BaseModel):
    label: Optional[str] = None
    system: str
    value: str


class Attributes11(BaseModel):
    name: str = Field(..., examples=['Health Activation Partners'])


class Links18(BaseModel):
    self: constr(pattern=r'/organization/[0-9a-z]+') = Field(
        ..., examples=['/organization/57b36e3c04ad8c2224f2af38']
    )


class Type7(Enum):
    organization = 'organization'


class OrganizationResource(BaseModel):
    attributes: Attributes11
    id: str = Field(..., examples=['57b36e3c04ad8c2224f2af38'])
    links: Optional[Links18] = None
    type: Type7 = Field(..., examples=['organization'])


class Meta2(BaseModel):
    primary: Optional[bool] = None


class Type8(Enum):
    coach = 'coach'


class Datum2(BaseModel):
    id: str = Field(..., examples=['57fee2a66b49113551658505'])
    meta: Optional[Meta2] = None
    type: Type8 = Field(..., examples=['coach'])


class Links19(BaseModel):
    related: Optional[constr(pattern=r'/patient/[0-9a-z]+/coaches')] = Field(
        None, examples=['/patient/57b36ef304ad8c2224f2af3a/coaches']
    )


class Coaches(BaseModel):
    data: List[Datum2]
    links: Optional[Links19] = None


class Query(BaseModel):
    name: str
    organization: str


class Meta3(BaseModel):
    query: Query = Field(
        ...,
        description='1. If the query does not return any groups, a group with the specified name will be created and related to the patient.\n2. If the query returns one group, that group will be related to the patient.\n3. If the query returns more than one group, the creation of the patient will fail.\n',
    )


class Type9(Enum):
    group = 'group'


class Datum3(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Required if the `meta.query` is not defined.',
        examples=['57b3708b04ad8c2224f2af3b'],
    )
    meta: Optional[Meta3] = Field(
        None,
        description='Allows the specification of a query for a group rather than providing a group id directly',
    )
    type: Type9 = Field(..., examples=['group'])


class Groups(BaseModel):
    data: List[Datum3]


class Relationships10(BaseModel):
    coaches: Optional[Coaches] = None
    groups: Groups


class Code1(BaseModel):
    system: str
    value: str


class Type10(Enum):
    blood_pressure_systolic = 'blood_pressure_systolic'
    blood_pressure_diastolic = 'blood_pressure_diastolic'
    hemoglobin_a1c = 'hemoglobin_a1c'
    hdl_cholesterol = 'hdl_cholesterol'
    ldl_cholesterol = 'ldl_cholesterol'
    total_cholesterol = 'total_cholesterol'
    triglycerides = 'triglycerides'
    blood_urea_nitrogen = 'blood_urea_nitrogen'
    creatinine = 'creatinine'
    hemoglobin = 'hemoglobin'
    hematocrit = 'hematocrit'
    total_serum_iron = 'total_serum_iron'
    thyroid_stimulating_hormone = 'thyroid_stimulating_hormone'
    free_thyroxine = 'free_thyroxine'
    free_triiodothyronine = 'free_triiodothyronine'
    total_triiodothyronine = 'total_triiodothyronine'
    cd4_cell_count = 'cd4_cell_count'
    hiv_viral_load = 'hiv_viral_load'
    inr = 'inr'
    free_testosterone = 'free_testosterone'
    total_testosterone = 'total_testosterone'
    c_reactive_protein = 'c_reactive_protein'
    prostate_specific_antigen = 'prostate_specific_antigen'
    cotinine = 'cotinine'
    c_peptide = 'c_peptide'
    blood_pressure = 'blood_pressure'
    blood_glucose = 'blood_glucose'
    weight = 'weight'
    heart_rate = 'heart_rate'
    body_fat_percentage = 'body_fat_percentage'
    body_mass_index = 'body_mass_index'
    body_temperature = 'body_temperature'
    forced_expiratory_volume1 = 'forced_expiratory_volume1'
    forced_vital_capacity = 'forced_vital_capacity'
    lean_body_mass = 'lean_body_mass'
    nausea_level = 'nausea_level'
    oxygen_saturation = 'oxygen_saturation'
    pain_level = 'pain_level'
    peak_expiratory_flow_rate = 'peak_expiratory_flow_rate'
    peripheral_perfusion_index = 'peripheral_perfusion_index'
    respiratory_rate = 'respiratory_rate'
    inhaler_usage = 'inhaler_usage'


class Attributes12(BaseModel):
    code: Optional[Code1] = None
    diastolic: Optional[float] = None
    occurred_at: Optional[str] = None
    systolic: Optional[float] = None
    type: Optional[Type10] = None
    unit: Optional[str] = None
    value: Optional[Any] = Field(
        None,
        description='Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.',
    )


class Identifier1(BaseModel):
    system: str
    value: str


class Query1(BaseModel):
    groups: Optional[List[str]] = None
    identifier: Identifier1
    organization: Optional[str] = None


class Meta4(BaseModel):
    query: Query1 = Field(
        ..., description='The query must return one and only one patient.'
    )


class Data15(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Required if the `meta.query` is not defined.',
        examples=['5817ead56f5316c0d05ba8bf'],
    )
    meta: Optional[Meta4] = Field(
        None,
        description='Allows the specification of a query for a patient rather than providing a patient id directly',
    )
    type: Optional[str] = None


class Patient2(BaseModel):
    data: Optional[Data15] = None
    links: Optional[Dict[str, Any]] = None


class Relationships11(BaseModel):
    patient: Optional[Patient2] = None


class PatientHealthMetricResource(BaseModel):
    attributes: Optional[Attributes12] = None
    id: str
    relationships: Optional[Relationships11] = None
    type: str


class Annotation(BaseModel):
    text: Optional[str] = None
    title: Optional[str] = None


class Data16(BaseModel):
    value: Optional[Any] = Field(
        None,
        description='Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number',
    )


class MetricType(Enum):
    blood_pressure_systolic = 'blood_pressure_systolic'
    blood_pressure_diastolic = 'blood_pressure_diastolic'
    hemoglobin_a1c = 'hemoglobin_a1c'
    hdl_cholesterol = 'hdl_cholesterol'
    ldl_cholesterol = 'ldl_cholesterol'
    total_cholesterol = 'total_cholesterol'
    triglycerides = 'triglycerides'
    blood_urea_nitrogen = 'blood_urea_nitrogen'
    creatinine = 'creatinine'
    hemoglobin = 'hemoglobin'
    hematocrit = 'hematocrit'
    total_serum_iron = 'total_serum_iron'
    thyroid_stimulating_hormone = 'thyroid_stimulating_hormone'
    free_thyroxine = 'free_thyroxine'
    free_triiodothyronine = 'free_triiodothyronine'
    total_triiodothyronine = 'total_triiodothyronine'
    cd4_cell_count = 'cd4_cell_count'
    hiv_viral_load = 'hiv_viral_load'
    inr = 'inr'
    free_testosterone = 'free_testosterone'
    total_testosterone = 'total_testosterone'
    c_reactive_protein = 'c_reactive_protein'
    prostate_specific_antigen = 'prostate_specific_antigen'
    cotinine = 'cotinine'
    c_peptide = 'c_peptide'
    blood_pressure = 'blood_pressure'
    blood_glucose = 'blood_glucose'
    weight = 'weight'
    heart_rate = 'heart_rate'
    body_fat_percentage = 'body_fat_percentage'
    body_mass_index = 'body_mass_index'
    body_temperature = 'body_temperature'
    forced_expiratory_volume1 = 'forced_expiratory_volume1'
    forced_vital_capacity = 'forced_vital_capacity'
    lean_body_mass = 'lean_body_mass'
    nausea_level = 'nausea_level'
    oxygen_saturation = 'oxygen_saturation'
    pain_level = 'pain_level'
    peak_expiratory_flow_rate = 'peak_expiratory_flow_rate'
    peripheral_perfusion_index = 'peripheral_perfusion_index'
    respiratory_rate = 'respiratory_rate'
    inhaler_usage = 'inhaler_usage'


class Source1(BaseModel):
    metadata: Optional[Any] = Field(None, description='Can be any value')
    name: Optional[str] = None
    source_id: Optional[str] = None


class Attributes13(BaseModel):
    field_thread: Optional[str] = Field(
        None,
        alias='_thread',
        description='Links together results. This should be the same as the thread of _action, if it is defined',
    )
    aggregation: Optional[str] = None
    annotations: Optional[List[Annotation]] = None
    channel: Optional[str] = None
    data: Optional[Data16] = None
    external_id: Optional[str] = None
    metric_type: Optional[MetricType] = None
    occurred_at: Optional[str] = Field(None, examples=['2018-09-18T12:24:37.000Z'])
    occurred_at_time_zone: Optional[str] = Field(None, examples=['America/New_York'])
    skipped: Optional[bool] = None
    source: Optional[Source1] = None
    type: Optional[str] = Field(
        None,
        description='Type of result. Usually the same as metric_type except for lifestyle actions',
    )
    window: Optional[str] = None


class Data17(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Action(BaseModel):
    data: Optional[Data17] = None
    links: Optional[Dict[str, Any]] = None


class Metric(BaseModel):
    data: Optional[Data17] = None
    links: Optional[Dict[str, Any]] = None


class Query2(BaseModel):
    groups: Optional[List[str]] = None
    identifier: Identifier1
    organization: Optional[str] = None


class Meta5(BaseModel):
    query: Query2 = Field(
        ..., description='The query must return one and only one patient.'
    )


class Data19(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Required if the `meta.query` is not defined.',
        examples=['5c0fc0d02d02421ed70ca1d1'],
    )
    meta: Optional[Meta5] = Field(
        None,
        description='Allows the specification of a query for a patient rather than providing a patient id directly',
    )
    type: Optional[str] = None


class Patient3(BaseModel):
    data: Optional[Data19] = None
    links: Optional[Dict[str, Any]] = None


class Relationships12(BaseModel):
    action: Optional[Action] = None
    metric: Optional[Metric] = None
    patient: Optional[Patient3] = None


class PatientHealthResultResource(BaseModel):
    attributes: Optional[Attributes13] = None
    id: str
    relationships: Optional[Relationships12] = None
    type: str


class PatientIdentifier(BaseModel):
    label: Optional[str] = None
    system: str
    unique: Optional[bool] = Field(
        True,
        description='If `true`, the combination of system and value must be global unique among all patients and coaches in Fitbit Plus.',
    )
    value: str


class WindowNotificationTimes(BaseModel):
    afternoon: Optional[int] = None
    evening: Optional[int] = None
    morning: Optional[int] = None
    night: Optional[int] = None


class WindowOrderItem(BaseModel):
    field_actions: Optional[List[str]] = Field(None, alias='_actions')
    type: Optional[str] = None


class Attributes14(BaseModel):
    adherence: Optional[Dict[str, Any]] = None
    critical: Optional[Dict[str, Any]] = None
    effective_from: Optional[str] = None
    time_zone: Optional[str] = None
    window_notification_times: Optional[WindowNotificationTimes] = None
    window_order: Optional[List[WindowOrderItem]] = None


class Links20(BaseModel):
    self: constr(pattern=r'/patient_plan_summary/[0-9a-z]+') = Field(
        ..., examples=['/patient_plan_summary/57b36e3c04ad8c2224f2af38']
    )


class Datum4(BaseModel):
    id: str
    type: str


class Links21(BaseModel):
    related: Optional[str] = None


class Actions1(BaseModel):
    data: Optional[List[Datum4]] = None
    links: Optional[Links21] = None


class Bundles(BaseModel):
    data: Optional[List[Datum4]] = None
    links: Optional[Links21] = None


class CurrentResults(BaseModel):
    data: Optional[List[Datum4]] = None
    links: Optional[Links21] = None


class Data20(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Patient4(BaseModel):
    data: Optional[Data20] = None
    links: Optional[Links21] = None


class Relationships13(BaseModel):
    actions: Actions1
    bundles: Bundles
    current_results: Optional[CurrentResults] = None
    patient: Patient4


class Type11(Enum):
    patient_plan_summary = 'patient_plan_summary'


class PatientPlanSummaryResource(BaseModel):
    attributes: Optional[Attributes14] = None
    id: str = Field(..., examples=['57b36e3c04ad8c2224f2af38'])
    links: Optional[Links20] = None
    relationships: Optional[Relationships13] = None
    type: Type11 = Field(..., examples=['patient_plan_summary'])


class Gender(Enum):
    male = 'male'
    female = 'female'
    other = 'other'


class Statement(BaseModel):
    updated_at: Optional[str] = Field(None, examples=['2016-06-03T13:15:22.000Z'])
    updated_by: Optional[str] = Field(None, examples=['5c509cc2f60e34018180b57c'])
    value: Optional[str] = Field(None, examples=['Enjoying nature.'])


class Links25(BaseModel):
    self: Optional[constr(pattern=r'/patient/[0-9a-z]+')] = Field(
        None, examples=['/patient/57b36ef304ad8c2224f2af3a']
    )
    twine_web_app: Optional[str] = Field(
        None,
        description='A link to the patient record in the Fitbit Plus web application.',
        examples=[
            'https://app.plus.fitbit.com/#/coach/patient/5367c6300b7bb6e94188c02c/overview'
        ],
    )


class Meta6(BaseModel):
    primary: Optional[bool] = None


class Type12(Enum):
    coach = 'coach'


class Datum7(BaseModel):
    id: str = Field(..., examples=['57fee2a66b49113551658505'])
    meta: Optional[Meta6] = None
    type: Type12 = Field(..., examples=['coach'])


class Links26(BaseModel):
    related: Optional[constr(pattern=r'/patient/[0-9a-z]+/groups')] = Field(
        None, examples=['/patient/57b36ef304ad8c2224f2af3a/groups']
    )


class Coaches1(BaseModel):
    data: List[Datum7]
    links: Optional[Links26] = None


class Type13(Enum):
    group = 'group'


class Datum8(BaseModel):
    id: Optional[str] = Field(None, examples=['57b3708b04ad8c2224f2af3b'])
    type: Type13 = Field(..., examples=['group'])


class Groups1(BaseModel):
    data: List[Datum8]


class Relationships14(BaseModel):
    coaches: Optional[Coaches1] = None
    groups: Groups1


class Type14(Enum):
    patient = 'patient'


class Type15(Enum):
    home = 'home'
    work = 'work'
    mobile = 'mobile'
    home_fax = 'home-fax'
    work_fax = 'work-fax'
    other = 'other'


class PhoneNumber(BaseModel):
    primary: bool = Field(..., examples=[True])
    type: Type15 = Field(..., examples=['mobile'])
    value: str = Field(..., examples=['555-555-1234'])


class Resource(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    type: Optional[str] = None


class Attributes16(BaseModel):
    fulfilled_at: str = Field(
        ...,
        description='Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)',
    )
    fulfilled_unit: Optional[str] = Field(
        None,
        description='Unit of the earned reward that has been fulfilled. (Read-only property)',
    )
    fulfilled_value: float = Field(
        ...,
        description='Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)',
    )


class Patient5(BaseModel):
    data: Optional[Data20] = None


class RewardEarning(BaseModel):
    data: Optional[Data20] = None


class Relationships15(BaseModel):
    patient: Optional[Patient5] = None
    reward_earning: RewardEarning


class RewardEarningFulfillmentResource(BaseModel):
    attributes: Optional[Attributes16] = None
    id: Optional[str] = None
    relationships: Optional[Relationships15] = None
    type: str


class Attributes17(BaseModel):
    earned_at: str = Field(
        ...,
        description='Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)',
    )
    earned_unit: Optional[str] = Field(
        None,
        description='Unit of the reward that has been earned. (Read-only property)',
    )
    earned_value: float = Field(
        ...,
        description='Value of the reward that has been earned. (Must not exceed the allocated value for the reward)',
    )
    fulfilled_at: Optional[str] = Field(
        None,
        description='Date at which the reward earning was fulfilled. (Read-only property)',
    )
    fulfilled_value: Optional[float] = Field(
        None,
        description='Value of the earned reward that has been fulfilled. (Read-only property)',
    )
    ready_for_fulfillment: Optional[bool] = Field(
        None,
        description='If true, the reward earning is ready to be fulfilled, either because the reward program activation was fulfill_as_earned or because the reward program activation has been deactivated. (Read-only property)',
    )


class Group(BaseModel):
    data: Optional[Data20] = None


class Patient6(BaseModel):
    data: Optional[Data20] = None


class Reward(BaseModel):
    data: Optional[Data20] = None


class RewardProgramActivation(BaseModel):
    data: Optional[Data20] = None


class Relationships16(BaseModel):
    group: Optional[Group] = None
    patient: Optional[Patient6] = None
    reward: Reward
    reward_program_activation: Optional[RewardProgramActivation] = None


class RewardEarningResource(BaseModel):
    attributes: Optional[Attributes17] = None
    id: Optional[str] = None
    relationships: Optional[Relationships16] = None
    type: str


class Attributes18(BaseModel):
    activated_at: str = Field(
        ...,
        description='Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)',
    )
    active: Optional[bool] = Field(
        True, description='If true, the reward program is currently active.'
    )
    allocated_count: Optional[float] = Field(
        None, description='Number of rewards allocated. (Read-only property)'
    )
    budget_unit: Optional[str] = Field(
        None, description='Unit of the reward program budget. (Read-only property)'
    )
    deactivated_at: Optional[str] = Field(
        None,
        description='Date at which the reward program was deactivated. (Must be after the activated_at date)',
    )
    earned_count: Optional[float] = Field(
        None, description='Number of reward earnings. (Read-only property)'
    )
    expires_at: Optional[str] = Field(
        None,
        description='Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)',
    )
    fulfill_as_earned: Optional[bool] = Field(
        None,
        description='If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)',
    )
    total_allocated_value: Optional[float] = Field(
        None, description='Total value of reward allocated. (Read-only property)'
    )
    total_earned_value: Optional[float] = Field(
        None, description='Total value of reward earnings. (Read-only property)'
    )


class Patient7(BaseModel):
    data: Optional[Data20] = None


class RewardProgram(BaseModel):
    data: Optional[Data20] = None


class Relationships17(BaseModel):
    patient: Patient7
    reward_program: RewardProgram


class RewardProgramActivationResource(BaseModel):
    attributes: Optional[Attributes18] = None
    id: Optional[str] = None
    relationships: Optional[Relationships17] = None
    type: str


class BudgetUnit(Enum):
    dollar = 'dollar'
    point = 'point'
    credit = 'credit'


class Attributes19(BaseModel):
    budget_unit: Optional[BudgetUnit] = Field(
        'dollar', description='Unit of the budget for the reard program.'
    )
    budget_value: float = Field(
        ...,
        description='Value of the budget for the reward program. (Must be greater than 0)',
    )
    description: Optional[str] = Field(
        None,
        description='Description of the reward program - designed to be a comprehensive text description',
    )
    duration_active: Optional[float] = Field(
        540,
        description='Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)',
    )
    end_at: str = Field(
        ...,
        description='Date at which the reward program ends. (Must be after the start_at)',
    )
    frozen: Optional[bool] = Field(
        False,
        description='If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.',
    )
    fulfill_as_earned: Optional[bool] = Field(
        False,
        description='If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.',
    )
    name: str = Field(..., description='Name of the reward program')
    start_at: str = Field(..., description='Date at which the reward program starts.')
    tagline: Optional[str] = Field(
        None, description='Tagline of the reward program - designed to be one line'
    )


class Data29(BaseModel):
    id: str
    type: str


class Group1(BaseModel):
    data: Data29


class Relationships18(BaseModel):
    group: Group1


class RewardProgramResource(BaseModel):
    attributes: Optional[Attributes19] = None
    id: Optional[str] = None
    relationships: Optional[Relationships18] = None
    type: str


class Attributes20(BaseModel):
    field_thread: Optional[str] = Field(
        None,
        alias='_thread',
        description='Unique string identifying the health action with which the reward is associated.',
    )
    allocated_at: str = Field(
        ...,
        description='Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)',
    )
    allocated_unit: Optional[str] = Field(
        None, description='Unit of the reward program. (Read-only property)'
    )
    allocated_value: float = Field(
        ...,
        description='Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)',
    )
    description: str = Field(..., description='Description of the reward.')
    earned_at: Optional[str] = Field(
        None, description='Date at which the reward was earned. (Read-only property)'
    )
    earned_value: Optional[float] = Field(
        None,
        description='Value of the reward that has been earned. (Read-only property)',
    )
    fulfilled_at: Optional[str] = Field(
        None,
        description='Date at which the reward earning was fulfilled. (Read-only property)',
    )
    fulfilled_value: Optional[float] = Field(
        None,
        description='Value of the earned reward that has been fulfilled. (Read-only property)',
    )
    target_at: Optional[str] = Field(
        None,
        description='Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)',
    )


class Data30(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class Patient8(BaseModel):
    data: Optional[Data30] = None


class RewardProgramActivation1(BaseModel):
    data: Optional[Data30] = None


class Relationships19(BaseModel):
    patient: Optional[Patient8] = None
    reward_program_activation: RewardProgramActivation1


class RewardResource(BaseModel):
    attributes: Optional[Attributes20] = None
    id: Optional[str] = None
    relationships: Optional[Relationships19] = None
    type: str


class TokenType(Enum):
    bearer = 'bearer'


class Attributes21(BaseModel):
    access_token: str = Field(..., examples=['a01fe2bb-1977-48d9-b722-ac7f9135143f'])
    expires_in: int = Field(..., examples=[3600])
    refresh_token: str = Field(..., examples=['b452cb17-72e2-4e90-b9c6-d77a0b66cf7c'])
    token_type: TokenType = Field(..., examples=['bearer'])


class Type16(Enum):
    group = 'group'


class Datum9(BaseModel):
    id: str = Field(..., examples=['57b36d6f04ad8c2224f2af36'])
    type: Type16 = Field(..., examples=['group'])


class Links27(BaseModel):
    related: constr(pattern=r'/oauth/token/[0-9a-z]+/groups') = Field(
        ..., examples=['/oauth/token/57b36d8804ad8c2224f2af37/groups']
    )


class Groups2(BaseModel):
    data: List[Datum9]
    links: Links27


class Type17(Enum):
    organization = 'organization'


class Data32(BaseModel):
    id: str = Field(..., examples=['57b36d6f04ad8c2224f2af36'])
    type: Type17 = Field(..., examples=['organization'])


class Links28(BaseModel):
    related: constr(pattern=r'/oauth/token/[0-9a-z]+/organization') = Field(
        ..., examples=['/oauth/token/57b36d8804ad8c2224f2af37/organization']
    )


class Organization(BaseModel):
    data: Data32
    links: Links28


class Relationships20(BaseModel):
    groups: Optional[Groups2] = None
    organization: Optional[Organization] = None


class Type18(Enum):
    token = 'token'


class TokenResource(BaseModel):
    attributes: Optional[Attributes21] = None
    id: str = Field(..., examples=['57b36c9a04ad8c2224f2af35'])
    relationships: Optional[Relationships20] = None
    type: Type18 = Field(..., examples=['token'])


class UpdateBundleRequest(BaseModel):
    data: BundleResource


class UpdateBundleResponse(BaseModel):
    data: BundleResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class UpdateCalendarEventResponse(BaseModel):
    data: Optional[CalendarEventResource] = None
    meta: Optional[CreateOrUpdateMetaResponse] = None


class UpdatePatientPlanSummaryRequest(BaseModel):
    data: PatientPlanSummaryResource


class UpdatePatientPlanSummaryResponse(BaseModel):
    data: PatientPlanSummaryResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class Identifier3(BaseModel):
    system: Optional[str] = Field(None, description='Name of system')
    value: Optional[str] = Field(None, description='Value in system')


class Query3(BaseModel):
    groups: List[str] = Field(..., description='Group to create/update patient in.')
    identifier: Identifier3 = Field(..., description='Identifier to match patient')


class Meta7(BaseModel):
    query: Query3


class FilterType(Enum):
    plan_check_in = 'plan-check-in'
    reminder = 'reminder'
    telephone_call = 'telephone-call'
    office_visit = 'office-visit'
    video_call = 'video-call'


class Include(Enum):
    owner = 'owner'


class Sort(Enum):
    send_time = 'send_time'
    field_send_time = '-send_time'


class Include2(Enum):
    patient = 'patient'
    questions = 'questions'


class Include6(Enum):
    patient = 'patient'


class Include10(Enum):
    question_definition = 'question_definition'
    answer = 'answer'


class Include14(Enum):
    groups = 'groups'
    organization = 'organization'


class Include16(Enum):
    actions = 'actions'
    bundles = 'bundles'
    patient = 'patient'
    current_results = 'current_results'


class ResponseStatus2(Enum):
    needsAction = 'needsAction'
    declined = 'declined'
    tentative = 'tentative'
    accepted = 'accepted'


class Attendee1(BaseModel):
    response_status: Optional[ResponseStatus2] = Field(
        None, description='Status of responses from attendees'
    )
    user: Optional[str] = None


class Type19(Enum):
    plan_check_in = 'plan-check-in'
    reminder = 'reminder'
    telephone_call = 'telephone-call'
    office_visit = 'office-visit'
    video_call = 'video-call'


class Attributes(BaseModel):
    all_day: Optional[bool] = Field(
        None,
        description='True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.',
    )
    attendees: Optional[List[Attendee1]] = Field(
        None, description='List of attendees for the calendar event'
    )
    completed_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.',
        examples=['2017-11-03T06:17:34.652Z'],
    )
    completed_by: Optional[Dict[str, Any]] = Field(
        None,
        description='The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.',
    )
    description: Optional[str] = None
    end_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event ends. Not valid for `plan-check-in` event type.',
        examples=['2017-11-03T08:00:00.000Z'],
    )
    location: Optional[str] = None
    start_at: Optional[str] = Field(
        None,
        description='The date and time when the calendar event starts',
        examples=['2017-11-03T04:00:00.000Z'],
    )
    time_zone: Optional[str] = Field(
        None,
        description='The time zone in which the dates for the calendar event are specified',
        examples=['America/New_York'],
    )
    title: Optional[str] = Field(
        None, description='The title of the calendar event. Must not be empty or null'
    )
    type: Optional[Type19] = Field(
        None, description='The type of calendar event. Immutable after event creation.'
    )


class Id(RootModel[str]):
    root: str


class DataModel(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class TypeModel(Enum):
    calendar_event = 'calendar_event'


class ResponseStatus3(Enum):
    accepted = 'accepted'
    declined = 'declined'
    tentative = 'tentative'


class AttributesModel(BaseModel):
    attendee: Optional[Dict[str, Any]] = Field(
        None, description='The attendee in the attendees list of the calendar event.'
    )
    response_status: Optional[ResponseStatus3] = Field(
        None, description='The response status for the attendee.'
    )


class TypeModel1(Enum):
    calendar_event_response = 'calendar_event_response'


class AttributesModel1(BaseModel):
    field_thread: Optional[str] = Field(None, alias='_thread')
    adherence: Optional[Adherence] = None
    details: Optional[Dict[str, Any]] = None
    effective_from: str
    effective_to: Optional[str] = None
    frequency_goal: Optional[FrequencyGoal] = None
    identifiers: Optional[List[Identifier]] = None
    intake: Optional[Dict[str, Any]] = None
    metric_required: Optional[bool] = None
    metrics: Optional[List[ActionMetric]] = None
    static_title: Optional[str] = None
    title: str
    tracking: Optional[bool] = None
    type: Type
    windows: Optional[List[ActionWindow]] = None


class ActionResource(BaseModel):
    attributes: Optional[AttributesModel1] = None
    id: str
    relationships: Optional[Relationships] = None
    type: str


class CreateActionRequest(BaseModel):
    data: ActionResource


class CreateActionResponse(BaseModel):
    data: ActionResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateBundleResponse(BaseModel):
    data: BundleResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class Owner1(BaseModel):
    data: DataModel


class Relationships4(BaseModel):
    owner: Optional[Owner1] = None


class Data6(BaseModel):
    attributes: Attributes
    relationships: Relationships4
    type: TypeModel


class CreateCalendarEventRequest(BaseModel):
    data: Data6


class CreateCalendarEventResponse(BaseModel):
    data: Optional[CalendarEventResource] = None
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CalendarEvent1(BaseModel):
    data: DataModel


class User1(BaseModel):
    data: DataModel


class Relationships5(BaseModel):
    calendar_event: Optional[CalendarEvent1] = None
    user: Optional[User1] = None


class Data7(BaseModel):
    attributes: AttributesModel
    relationships: Relationships5
    type: TypeModel1


class CreateCalendarEventResponseRequest(BaseModel):
    data: Data7


class CreateGroupRequest(BaseModel):
    data: GroupResource


class CreateGroupResponse(BaseModel):
    data: GroupResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateOrUpdateErrorResponse(BaseModel):
    errors: Optional[Error] = None
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreatePatientHealthMetricResponse(BaseModel):
    data: PatientHealthMetricResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateRewardEarningFulfillmentRequest(BaseModel):
    data: RewardEarningFulfillmentResource


class CreateRewardEarningFulfillmentResponse(BaseModel):
    data: RewardEarningFulfillmentResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateRewardEarningRequest(BaseModel):
    data: RewardEarningResource


class CreateRewardEarningResponse(BaseModel):
    data: RewardEarningResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateRewardProgramActivationRequest(BaseModel):
    data: RewardProgramActivationResource


class CreateRewardProgramActivationResponse(BaseModel):
    data: RewardProgramActivationResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateRewardProgramRequest(BaseModel):
    data: RewardProgramResource


class CreateRewardProgramResponse(BaseModel):
    data: RewardProgramResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateRewardRequest(BaseModel):
    data: RewardResource


class CreateRewardResponse(BaseModel):
    data: RewardResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class CreateTokenResponse(BaseModel):
    data: TokenResource
    included: Optional[List[GroupResource]] = None
    meta: Optional[CreateOrUpdateMetaResponse] = None


class FetchActionResponse(BaseModel):
    data: ActionResource
    meta: Optional[FetchMetaResponse] = None


class FetchBundleResponse(BaseModel):
    data: BundleResource
    meta: Optional[FetchMetaResponse] = None


class FetchCalendarEventResponse(BaseModel):
    data: Optional[CalendarEventResource] = None
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchCalendarEventsResponse(BaseModel):
    data: Optional[List[CalendarEventResource]] = None
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient)\n',
    )
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchCoachResponse(BaseModel):
    data: CoachResource
    meta: Optional[FetchMetaResponse] = None


class FetchCoachesResponse(BaseModel):
    data: List[CoachResource]
    meta: Optional[FetchMetaResponse] = None


class FetchEmailHistoriesResponse(BaseModel):
    data: List[EmailHistoryResource]
    meta: Optional[FetchMetaResponse] = None


class FetchEmailHistoryResponse(BaseModel):
    data: EmailHistoryResource
    meta: Optional[FetchMetaResponse] = None


class FetchErrorResponse(BaseModel):
    errors: Optional[Error] = None
    meta: Optional[FetchMetaResponse] = None


class FetchGroupResponse(BaseModel):
    data: GroupResource
    meta: Optional[FetchMetaResponse] = None


class FetchGroupsResponse(BaseModel):
    data: List[GroupResource]
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfileAnswerResponse(BaseModel):
    data: HealthProfileAnswerResource
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfileAnswersResponse(BaseModel):
    data: List[HealthProfileAnswerResource]
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient)\n',
    )
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfileQuestionResponse(BaseModel):
    data: HealthProfileQuestionResource
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [question_definition](#operation/fetchHealthQuestionDefinition), [answer](#operation/fetchHealthProfileAnswer)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfileQuestionsResponse(BaseModel):
    data: List[HealthProfileQuestionResource]
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [question_definition](#operation/fetchHealthQuestionDefinition), [answer](#operation/fetchHealthProfileAnswer)\n',
    )
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfileResponse(BaseModel):
    data: HealthProfileResource
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient), [question](#operation/fetchHealthProfileQuestion)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchHealthProfilesResponse(BaseModel):
    data: List[HealthProfileResource]
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [patient](#operation/fetchPatient), [question](#operation/fetchHealthProfileQuestion)\n',
    )
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchHealthQuestionDefinitionResponse(BaseModel):
    data: HealthQuestionDefinitionResource
    meta: Optional[FetchMetaResponse] = None


class FetchHealthQuestionDefinitionsResponse(BaseModel):
    data: List[HealthQuestionDefinitionResource]
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchOrganizationResponse(BaseModel):
    data: OrganizationResource
    meta: Optional[FetchMetaResponse] = None


class FetchPatientHealthMetricResponse(BaseModel):
    data: List[PatientHealthMetricResource]
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchPatientHealthResultResponse(BaseModel):
    data: List[PatientHealthResultResource]
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class FetchPatientPlanSummariesResponse(BaseModel):
    data: List[PatientPlanSummaryResource]
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [action](#operation/fetchAction), [bundle](#operation/fetchBundle) and [patient](#operation/fetchPatient)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchPatientPlanSummaryResponse(BaseModel):
    data: PatientPlanSummaryResource
    included: Optional[List[Resource]] = Field(
        None,
        description='Related resources which are included in the response based on the `include` param.\nAttributes of each resource will vary depending on the type.\nSee [action](#operation/fetchAction), [bundle](#operation/fetchBundle) and [patient](#operation/fetchPatient)\n',
    )
    meta: Optional[FetchMetaResponse] = None


class FetchRewardEarningFulfillmentResponse(BaseModel):
    data: RewardEarningFulfillmentResource
    meta: Optional[FetchMetaResponse] = None


class FetchRewardEarningFulfillmentsResponse(BaseModel):
    data: List[RewardEarningFulfillmentResource]
    meta: Optional[FetchMetaResponse] = None


class FetchRewardEarningResponse(BaseModel):
    data: RewardEarningResource
    meta: Optional[FetchMetaResponse] = None


class FetchRewardEarningsResponse(BaseModel):
    data: List[RewardEarningResource]
    meta: Optional[FetchMetaResponse] = None


class FetchRewardProgramActivationResponse(BaseModel):
    data: RewardProgramActivationResource
    meta: Optional[FetchMetaResponse] = None


class FetchRewardProgramActivationsResponse(BaseModel):
    data: List[RewardProgramActivationResource]
    meta: Optional[FetchMetaResponse] = None


class FetchRewardProgramResponse(BaseModel):
    data: RewardProgramResource
    meta: Optional[FetchMetaResponse] = None


class FetchRewardProgramsResponse(BaseModel):
    data: List[RewardProgramResource]
    meta: Optional[FetchMetaResponse] = None


class FetchRewardResponse(BaseModel):
    data: RewardResource
    meta: Optional[FetchMetaResponse] = None


class FetchRewardsResponse(BaseModel):
    data: List[RewardResource]
    meta: Optional[FetchMetaResponse] = None


PatientHealthMetricCreateResource = PatientHealthMetricResource


class Attributes15(BaseModel):
    addresses: Optional[List[Address]] = None
    archive_history: Optional[List[ArchiveHistory]] = None
    archived: Optional[bool] = Field(None, examples=[True])
    birth_date: Optional[date] = Field(None, examples=['1944-03-06'])
    email_address: Optional[str] = Field(None, examples=['fiona@example.com'])
    enrolled_at: Optional[str] = Field(None, examples=['2016-05-26T15:25:54.000Z'])
    first_access_at: Optional[str] = Field(None, examples=['2016-06-03T13:15:22.000Z'])
    first_name: Optional[str] = Field(None, examples=['Fiona'])
    gender: Optional[Gender] = Field(None, examples=['female'])
    identifiers: Optional[List[PatientIdentifier]] = None
    invited_at: Optional[str] = Field(None, examples=['2016-06-01T16:20:16.000Z'])
    last_access_at: Optional[str] = Field(None, examples=['2016-07-11T17:50:49.400Z'])
    last_name: Optional[str] = Field(None, examples=['Reeves'])
    note: Optional[str] = Field(
        None,
        description="Coach's note about the patient. Not visible to the patient.",
        examples=['Relies on daughter to get around'],
    )
    phone_numbers: Optional[List[PhoneNumber]] = None
    statement: Optional[Statement] = Field(
        None, description="A patient's motivation statement."
    )
    updated_at: Optional[str] = Field(None, examples=['2016-07-11T17:13:57.027Z'])


class PatientResource(BaseModel):
    attributes: Attributes15
    id: Optional[str] = Field(None, examples=['57b36ef304ad8c2224f2af3a'])
    links: Optional[Links25] = None
    relationships: Optional[Relationships14] = None
    type: Type14 = Field(..., examples=['patient'])


class UpdateActionRequest(BaseModel):
    data: ActionResource


class UpdateActionResponse(BaseModel):
    data: ActionResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class Owner2(BaseModel):
    data: Optional[DataModel] = None


class Relationships21(BaseModel):
    owner: Optional[Owner2] = None


class Data33(BaseModel):
    attributes: Optional[Attributes] = None
    id: Id
    relationships: Optional[Relationships21] = None
    type: TypeModel


class UpdateCalendarEventRequest(BaseModel):
    data: Optional[Data33] = None


class UpdatePatientRequest(BaseModel):
    data: PatientResource


class UpdatePatientResponse(BaseModel):
    data: PatientResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class UpsertPatientRequest(BaseModel):
    data: PatientResource
    meta: Meta7


class CreatePatientHealthMetricRequest(BaseModel):
    data: PatientHealthMetricCreateResource
    meta: Optional[Meta] = None


class CreatePatientResponse(BaseModel):
    data: PatientResource
    meta: Optional[CreateOrUpdateMetaResponse] = None


class FetchPatientResponse(BaseModel):
    data: PatientResource
    meta: Optional[FetchMetaResponse] = None


class FetchPatientsResponse(BaseModel):
    data: List[PatientResource]
    links: Optional[CollectionResponseLinks] = None
    meta: Optional[FetchMetaResponse] = None


class PatientCreateResource(PatientResource):
    relationships: Optional[Relationships10] = None


class CreatePatientRequest(BaseModel):
    data: PatientCreateResource
    meta: Optional[Meta1] = None
